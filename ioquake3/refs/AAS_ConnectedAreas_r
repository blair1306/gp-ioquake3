<def f='codebrowser/code/botlib/be_aas_cluster.c' l='688' ll='717' type='void AAS_ConnectedAreas_r(int * areanums, int numareas, int * connectedareas, int curarea)'/>
<use f='codebrowser/code/botlib/be_aas_cluster.c' l='715' u='c' c='AAS_ConnectedAreas_r'/>
<use f='codebrowser/code/botlib/be_aas_cluster.c' l='731' u='c' c='AAS_ConnectedAreas'/>
<doc f='codebrowser/code/botlib/be_aas_cluster.c' l='463'>/*
//===========================================================================
//
// Parameter:				-
// Returns:					-
// Changes Globals:		-
//===========================================================================
int AAS_MapContainsTeleporters(void)
{
	bsp_entity_t *entities, *ent;
	char *classname;

	entities = AAS_ParseBSPEntities();

	for (ent = entities; ent; ent = ent-&gt;next)
	{
		classname = AAS_ValueForBSPEpairKey(ent, &quot;classname&quot;);
		if (classname &amp;&amp; !strcmp(classname, &quot;misc_teleporter&quot;))
		{
			AAS_FreeBSPEntities(entities);
			return qtrue;
		} //end if
	} //end for
	return qfalse;
} //end of the function AAS_MapContainsTeleporters
//===========================================================================
//
// Parameter:				-
// Returns:					-
// Changes Globals:		-
//===========================================================================
int AAS_NonConvexFaces(aas_face_t *face1, aas_face_t *face2, int side1, int side2)
{
	int i, j, edgenum;
	aas_plane_t *plane1, *plane2;
	aas_edge_t *edge;
	

	plane1 = &amp;aasworld.planes[face1-&gt;planenum ^ side1];
	plane2 = &amp;aasworld.planes[face2-&gt;planenum ^ side2];

	//check if one of the points of face1 is at the back of the plane of face2
	for (i = 0; i &lt; face1-&gt;numedges; i++)
	{
		edgenum = abs(aasworld.edgeindex[face1-&gt;firstedge + i]);
		edge = &amp;aasworld.edges[edgenum];
		for (j = 0; j &lt; 2; j++)
		{
			if (DotProduct(plane2-&gt;normal, aasworld.vertexes[edge-&gt;v[j]]) -
							plane2-&gt;dist &lt; -0.01) return qtrue;
		} //end for
	} //end for
	for (i = 0; i &lt; face2-&gt;numedges; i++)
	{
		edgenum = abs(aasworld.edgeindex[face2-&gt;firstedge + i]);
		edge = &amp;aasworld.edges[edgenum];
		for (j = 0; j &lt; 2; j++)
		{
			if (DotProduct(plane1-&gt;normal, aasworld.vertexes[edge-&gt;v[j]]) -
							plane1-&gt;dist &lt; -0.01) return qtrue;
		} //end for
	} //end for

	return qfalse;
} //end of the function AAS_NonConvexFaces
//===========================================================================
//
// Parameter:				-
// Returns:					-
// Changes Globals:		-
//===========================================================================
qboolean AAS_CanMergeAreas(int *areanums, int numareas)
{
	int i, j, s, face1num, face2num, side1, side2, fn1, fn2;
	aas_face_t *face1, *face2;
	aas_area_t *area1, *area2;

	for (i = 0; i &lt; numareas; i++)
	{
		area1 = &amp;aasworld.areas[areanums[i]];
		for (fn1 = 0; fn1 &lt; area1-&gt;numfaces; fn1++)
		{
			face1num = abs(aasworld.faceindex[area1-&gt;firstface + fn1]);
			face1 = &amp;aasworld.faces[face1num];
			side1 = face1-&gt;frontarea != areanums[i];
			//check if the face isn&apos;t a shared one with one of the other areas
			for (s = 0; s &lt; numareas; s++)
			{
				if (s == i) continue;
				if (face1-&gt;frontarea == s || face1-&gt;backarea == s) break;
			} //end for
			//if the face was a shared one
			if (s != numareas) continue;
			//
			for (j = 0; j &lt; numareas; j++)
			{
				if (j == i) continue;
				area2 = &amp;aasworld.areas[areanums[j]];
				for (fn2 = 0; fn2 &lt; area2-&gt;numfaces; fn2++)
				{
					face2num = abs(aasworld.faceindex[area2-&gt;firstface + fn2]);
					face2 = &amp;aasworld.faces[face2num];
					side2 = face2-&gt;frontarea != areanums[j];
					//check if the face isn&apos;t a shared one with one of the other areas
					for (s = 0; s &lt; numareas; s++)
					{
						if (s == j) continue;
						if (face2-&gt;frontarea == s || face2-&gt;backarea == s) break;
					} //end for
					//if the face was a shared one
					if (s != numareas) continue;
					//
					if (AAS_NonConvexFaces(face1, face2, side1, side2)) return qfalse;
				} //end for
			} //end for
		} //end for
	} //end for
	return qtrue;
} //end of the function AAS_CanMergeAreas
//===========================================================================
//
// Parameter:				-
// Returns:					-
// Changes Globals:		-
//===========================================================================
qboolean AAS_NonConvexEdges(aas_edge_t *edge1, aas_edge_t *edge2, int side1, int side2, int planenum)
{
	int i;
	vec3_t edgevec1, edgevec2, normal1, normal2;
	float dist1, dist2;
	aas_plane_t *plane;

	plane = &amp;aasworld.planes[planenum];
	VectorSubtract(aasworld.vertexes[edge1-&gt;v[1]], aasworld.vertexes[edge1-&gt;v[0]], edgevec1);
	VectorSubtract(aasworld.vertexes[edge2-&gt;v[1]], aasworld.vertexes[edge2-&gt;v[0]], edgevec2);
	if (side1) VectorInverse(edgevec1);
	if (side2) VectorInverse(edgevec2);
	//
	CrossProduct(edgevec1, plane-&gt;normal, normal1);
	dist1 = DotProduct(normal1, aasworld.vertexes[edge1-&gt;v[0]]);
	CrossProduct(edgevec2, plane-&gt;normal, normal2);
	dist2 = DotProduct(normal2, aasworld.vertexes[edge2-&gt;v[0]]);

	for (i = 0; i &lt; 2; i++)
	{
		if (DotProduct(aasworld.vertexes[edge1-&gt;v[i]], normal2) - dist2 &lt; -0.01) return qfalse;
	} //end for
	for (i = 0; i &lt; 2; i++)
	{
		if (DotProduct(aasworld.vertexes[edge2-&gt;v[i]], normal1) - dist1 &lt; -0.01) return qfalse;
	} //end for
	return qtrue;
} //end of the function AAS_NonConvexEdges
//===========================================================================
//
// Parameter:				-
// Returns:					-
// Changes Globals:		-
//===========================================================================
qboolean AAS_CanMergeFaces(int *facenums, int numfaces, int planenum)
{
	int i, j, s, edgenum1, edgenum2, side1, side2, en1, en2, ens;
	aas_face_t *face1, *face2, *otherface;
	aas_edge_t *edge1, *edge2;

	for (i = 0; i &lt; numfaces; i++)
	{
		face1 = &amp;aasworld.faces[facenums[i]];
		for (en1 = 0; en1 &lt; face1-&gt;numedges; en1++)
		{
			edgenum1 = aasworld.edgeindex[face1-&gt;firstedge + en1];
			side1 = (edgenum1 &lt; 0) ^ (face1-&gt;planenum != planenum);
			edgenum1 = abs(edgenum1);
			edge1 = &amp;aasworld.edges[edgenum1];
			//check if the edge is shared with another face
			for (s = 0; s &lt; numfaces; s++)
			{
				if (s == i) continue;
				otherface = &amp;aasworld.faces[facenums[s]];
				for (ens = 0; ens &lt; otherface-&gt;numedges; ens++)
				{
					if (edgenum1 == abs(aasworld.edgeindex[otherface-&gt;firstedge + ens])) break;
				} //end for
				if (ens != otherface-&gt;numedges) break;
			} //end for
			//if the edge was shared
			if (s != numfaces) continue;
			//
			for (j = 0; j &lt; numfaces; j++)
			{
				if (j == i) continue;
				face2 = &amp;aasworld.faces[facenums[j]];
				for (en2 = 0; en2 &lt; face2-&gt;numedges; en2++)
				{
					edgenum2 = aasworld.edgeindex[face2-&gt;firstedge + en2];
					side2 = (edgenum2 &lt; 0) ^ (face2-&gt;planenum != planenum);
					edgenum2 = abs(edgenum2);
					edge2 = &amp;aasworld.edges[edgenum2];
					//check if the edge is shared with another face
					for (s = 0; s &lt; numfaces; s++)
					{
						if (s == i) continue;
						otherface = &amp;aasworld.faces[facenums[s]];
						for (ens = 0; ens &lt; otherface-&gt;numedges; ens++)
						{
							if (edgenum2 == abs(aasworld.edgeindex[otherface-&gt;firstedge + ens])) break;
						} //end for
						if (ens != otherface-&gt;numedges) break;
					} //end for
					//if the edge was shared
					if (s != numfaces) continue;
					//
					if (AAS_NonConvexEdges(edge1, edge2, side1, side2, planenum)) return qfalse;
				} //end for
			} //end for
		} //end for
	} //end for
	return qtrue;
} //end of the function AAS_CanMergeFaces*/
//===========================================================================
//
// Parameter:				-
// Returns:					-
// Changes Globals:		-
//===========================================================================</doc>
