<def f='codebrowser/code/botlib/be_ai_move.c' l='1854' ll='1918' type='bot_moveresult_t BotTravel_Jump(bot_movestate_t * ms, aas_reachability_t * reach)'/>
<use f='codebrowser/code/botlib/be_ai_move.c' l='3316' u='c' c='BotMoveToGoal'/>
<doc f='codebrowser/code/botlib/be_ai_move.c' l='1781'>/*
bot_moveresult_t BotTravel_Jump(bot_movestate_t *ms, aas_reachability_t *reach)
{
	vec3_t hordir, dir1, dir2, mins, maxs, start, end;
	int gapdist;
	float dist1, dist2, speed;
	bot_moveresult_t_cleared( result );
	bsp_trace_t trace;

	//
	hordir[0] = reach-&gt;start[0] - reach-&gt;end[0];
	hordir[1] = reach-&gt;start[1] - reach-&gt;end[1];
	hordir[2] = 0;
	VectorNormalize(hordir);
	//
	VectorCopy(reach-&gt;start, start);
	start[2] += 1;
	//minus back the bouding box size plus 16
	VectorMA(reach-&gt;start, 80, hordir, end);
	//
	AAS_PresenceTypeBoundingBox(PRESENCE_NORMAL, mins, maxs);
	//check for solids
	trace = AAS_Trace(start, mins, maxs, end, ms-&gt;entitynum, MASK_PLAYERSOLID);
	if (trace.startsolid) VectorCopy(start, trace.endpos);
	//check for a gap
	for (gapdist = 0; gapdist &lt; 80; gapdist += 10)
	{
		VectorMA(start, gapdist+10, hordir, end);
		end[2] += 1;
		if (AAS_PointAreaNum(end) != ms-&gt;reachareanum) break;
	} //end for
	if (gapdist &lt; 80) VectorMA(reach-&gt;start, gapdist, hordir, trace.endpos);
//	dist1 = BotGapDistance(start, hordir, ms-&gt;entitynum);
//	if (dist1 &amp;&amp; dist1 &lt;= trace.fraction * 80) VectorMA(reach-&gt;start, dist1-20, hordir, trace.endpos);
	//
	VectorSubtract(ms-&gt;origin, reach-&gt;start, dir1);
	dir1[2] = 0;
	dist1 = VectorNormalize(dir1);
	VectorSubtract(ms-&gt;origin, trace.endpos, dir2);
	dir2[2] = 0;
	dist2 = VectorNormalize(dir2);
	//if just before the reachability start
	if (DotProduct(dir1, dir2) &lt; -0.8 || dist2 &lt; 5)
	{
		//botimport.Print(PRT_MESSAGE, &quot;between jump start and run to point\n&quot;);
		hordir[0] = reach-&gt;end[0] - ms-&gt;origin[0];
		hordir[1] = reach-&gt;end[1] - ms-&gt;origin[1];
		hordir[2] = 0;
		VectorNormalize(hordir);
		//elemantary action jump
		if (dist1 &lt; 24) EA_Jump(ms-&gt;client);
		else if (dist1 &lt; 32) EA_DelayedJump(ms-&gt;client);
		EA_Move(ms-&gt;client, hordir, 600);
		//
		ms-&gt;jumpreach = ms-&gt;lastreachnum;
	} //end if
	else
	{
		//botimport.Print(PRT_MESSAGE, &quot;going towards run to point\n&quot;);
		hordir[0] = trace.endpos[0] - ms-&gt;origin[0];
		hordir[1] = trace.endpos[1] - ms-&gt;origin[1];
		hordir[2] = 0;
		VectorNormalize(hordir);
		//
		if (dist2 &gt; 80) dist2 = 80;
		speed = 400 - (400 - 5 * dist2);
		EA_Move(ms-&gt;client, hordir, speed);
	} //end else
	VectorCopy(hordir, result.movedir);
	//
	return result;
} //end of the function BotTravel_Jump*/
//*</doc>
