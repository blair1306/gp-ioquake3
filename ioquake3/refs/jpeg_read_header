<dec f='codebrowser/code/jpeg-8c/jpeglib.h' l='1019' type='int jpeg_read_header(j_decompress_ptr cinfo, boolean require_image)'/>
<def f='codebrowser/code/jpeg-8c/jdapimin.c' l='241' ll='272' macro='1' type='int jpeg_read_header(j_decompress_ptr cinfo, boolean require_image)'/>
<doc f='codebrowser/code/jpeg-8c/jdapimin.c' l='214'>/*
 * Decompression startup: read start of JPEG datastream to see what&apos;s there.
 * Need only initialize JPEG object and supply a data source before calling.
 *
 * This routine will read as far as the first SOS marker (ie, actual start of
 * compressed data), and will save all tables and parameters in the JPEG
 * object.  It will also initialize the decompression parameters to default
 * values, and finally return JPEG_HEADER_OK.  On return, the application may
 * adjust the decompression parameters and then call jpeg_start_decompress.
 * (Or, if the application only wanted to determine the image parameters,
 * the data need not be decompressed.  In that case, call jpeg_abort or
 * jpeg_destroy to release any temporary space.)
 * If an abbreviated (tables only) datastream is presented, the routine will
 * return JPEG_HEADER_TABLES_ONLY upon reaching EOI.  The application may then
 * re-use the JPEG object to read the abbreviated image datastream(s).
 * It is unnecessary (but OK) to call jpeg_abort in this case.
 * The JPEG_SUSPENDED return code only occurs if the data source module
 * requests suspension of the decompressor.  In this case the application
 * should load more source data and then re-call jpeg_read_header to resume
 * processing.
 * If a non-suspending data source is used and require_image is TRUE, then the
 * return code need not be inspected since only JPEG_HEADER_OK is possible.
 *
 * This routine is now just a front end to jpeg_consume_input, with some
 * extra error checking.
 */</doc>
<use f='codebrowser/code/renderercommon/tr_image_jpg.c' l='158' u='c' c='R_LoadJPG'/>
